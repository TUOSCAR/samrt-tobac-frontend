---
description: 
globs: 
alwaysApply: true
---
# 智慧烟田系统项目规则

## 项目概述

- 智慧烟田监测与决策支持系统是一套基于无人机影像分析和大模型决策的烟草生产管理平台
- 系统围绕"监测任务生命周期"设计，实现从数据采集到执行反馈的全流程闭环管理
- 面向三类用户：管理员、烟技人员和烟农，提供差异化功能和界面
- 核心价值：通过AI提升烟草种植科学化水平，提高产量和质量

## 技术栈规范

### 后端技术规范
- Django 5 + Django REST Framework：用于构建RESTful API
- Celery 5.x：处理异步任务和定时任务
- PostgreSQL 14+ 与 PostGIS 3.x：支持地理空间数据的关系型数据库
- Redis 6.x+：用于缓存、消息队列和Celery结果存储
- Python 3.10+：开发语言版本要求

### 前端技术规范
- Vue 3.3+：使用Composition API
- Pinia 2.x：状态管理
- Element Plus 2.x：UI组件库
- Leaflet 1.9+：地图可视化
- ECharts 5.x：数据图表展示
- Vite：构建工具
- TypeScript：前端开发语言

### 集成服务规范
- 大模型API：使用Dify/COZE API构建知识库和智能决策支持，统一API调用接口
- 天气API：使用环境云API获取气象数据（http://www.envicloud.cn/pages/guide.html#v2weatherlive）

### 部署架构
- **后端**：Nginx + Gunicorn + Django
- **前端**：Nginx + Vue静态资源
- **文件存储**：对象存储服务

## 代码结构规范

### 后端目录结构
```
smart_tobacco/
├── apps/                       # Django 应用目录
│   ├── config/                 # 系统配置模块
│   ├── accounts/               # 用户认证与权限
│   ├── fields/                 # 烟田地块管理
│   ├── data_management/        # 数据管理(影像、气象等)
│   ├── monitoring/             # 监测任务管理
│   ├── analysis/               # 基础分析工具
│   ├── llm_analysis/           # 大模型分析与决策
│   │   ├── providers/          # 大模型服务提供商
│   │   ├── prompts/            # 提示词模板
│   │   └── pipelines/          # 分析流水线
│   ├── execution/              # 决策执行与反馈
│   └── farming/                # 农事管理
├── core/                       # 核心功能模块
│   ├── settings/               # 项目设置
│   ├── urls.py                 # 主URL配置
│   ├── middleware.py           # 自定义中间件
│   └── celery.py               # Celery配置
├── utils/                      # 工具函数
│   ├── validators.py           # 验证器
│   ├── geo_utils.py            # 地理信息工具
│   ├── file_handlers.py        # 文件处理工具
│   └── api_clients/            # 外部API客户端
├── third_party/                # 第三方服务集成
│   ├── dify_client.py          # Dify API集成
│   └── weather_api.py          # 气象数据API
├── templates/                  # Django模板
├── static/                     # 静态文件
├── media/                      # 用户上传文件
│   ├── drone_images/           # 无人机影像
│   │   ├── {year}/             # 年份
│   │   │   ├── {month}/        # 月份
│   │   │   │   ├── raw/        # 原始影像
│   │   │   │   └── processed/  # 处理后影像
│   ├── documents/              # 文档
│   │   ├── technical/          # 技术文档
│   │   ├── policy/             # 政策文档
│   │   └── reports/            # 分析报告
│   └── feedback/               # 执行反馈
│       ├── {year}/          
│       │   ├── {month}/     
│       │   │   ├── images/     # 图片
│       │   │   └── videos/     # 视频
└── requirements/               # 依赖管理
    ├── base.txt                # 基础依赖
    ├── dev.txt                 # 开发环境依赖
    └── prod.txt                # 生产环境依赖
```

### 前端目录结构
```
smart_tobacco_frontend/
├── public/                    # 静态资源目录
├── src/
│   ├── constants/             # 常量定义
│   │   ├── api.js             # API路径常量
│   │   ├── enums.js           # 枚举值定义
│   │   └── config.js          # 配置常量
│   ├── composables/           # 组合式函数
│   │   ├── useAuth.js         # 认证相关
│   │   ├── useMap.js          # 地图相关
│   │   └── useAnalysis.js     # 分析相关
│   ├── api/                   # API请求模块
│   │   ├── auth.js            # 认证API
│   │   ├── fields.js          # 地块API
│   │   ├── monitoring.js      # 监测任务API
│   │   ├── analysis.js        # 分析API
│   │   ├── llm.js             # 大模型API
│   │   ├── execution.js       # 执行任务API
│   │   └── farming.js         # 农事API
│   ├── assets/                # 静态资源
│   ├── components/            # 通用组件
│   │   ├── common/            # 公共组件
│   │   ├── map/               # 地图组件
│   │   ├── analysis/          # 分析组件
│   │   ├── monitoring/        # 监测任务组件
│   │   └── execution/         # 执行任务组件
│   ├── layouts/               # 布局组件
│   │   ├── AdminLayout.vue    # 管理员布局
│   │   ├── TechnicianLayout.vue # 烟技人员布局
│   │   └── FarmerLayout.vue   # 烟农布局
│   ├── router/                # 路由配置
│   ├── store/                 # Pinia状态管理
│   │   ├── auth.js            # 认证状态
│   │   ├── fields.js          # 地块状态
│   │   ├── monitoring.js      # 监测任务状态
│   │   └── execution.js       # 执行任务状态
│   ├── views/                 # 页面组件
│   │   ├── auth/              # 认证页面
│   │   ├── dashboard/         # 仪表盘
│   │   ├── fields/            # 地块管理
│   │   ├── monitoring/        # 监测任务
│   │   ├── analysis/          # 数据分析
│   │   ├── llm/               # 大模型决策
│   │   ├── execution/         # 执行反馈
│   │   └── farming/           # 农事管理
│   └── utils/                 # 工具函数
│       ├── auth.js            # 认证相关
│       ├── date.js            # 日期处理
│       ├── geojson.js         # GeoJSON处理
│       └── validators.js      # 表单验证
```

## 命名规范

### 通用命名规范
- 变量和函数名：使用小驼峰命名法（camelCase）
- 类名：使用大驼峰命名法（PascalCase）
- 常量：使用大写字母和下划线（UPPER_SNAKE_CASE）
- 所有命名应具有描述性，避免使用缩写和单字母变量名

### 后端命名规范
- Django模型：使用单数形式的名词，如 `MonitoringTask`
- 数据库表名：使用小写和下划线，如 `monitoring_tasks`
- API URL：使用kebab-case，如 `/api/monitoring-tasks/`
- 应用名称：使用下划线分隔，如 `data_management`
- 配置参数：使用大写下划线格式，如 `WEATHER_API_KEY`

### 前端命名规范
- 组件文件名：使用PascalCase，如 `MonitoringTaskList.vue`
- 页面文件名：使用PascalCase，如 `FieldDetailView.vue`
- 工具函数文件名：使用camelCase，如 `dateFormatter.js`
- CSS类名：使用BEM命名法，如 `.field-card__title--active`
- Pinia Store：使用camelCase，如 `monitoringStore.js`

## 数据库设计规则

### 基本规则
- 所有表必须包含id（主键）、created_at和updated_at字段
- 外键命名格式：`{关联表单数}_id`
- 状态字段使用VARCHAR类型，并在模型中定义Choices常量
- 地理数据使用PostGIS的GEOGRAPHY类型，不使用GEOMETRY类型
- 配置类数据采用key-value存储方式
- 使用JSONB类型存储非关系型数据和元数据
- 敏感数据必须加密存储
- 索引规则：
  - 常用查询字段创建单列索引
  - 常用组合查询条件创建联合索引
  - 地理数据字段创建空间索引

### 关键表结构设计

#### 用户与权限模块
```sql
-- 用户表
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    role VARCHAR(20) NOT NULL, -- admin, technician, farmer
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- 地块权限表
CREATE TABLE field_permissions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    field_id INTEGER REFERENCES tobacco_fields(id) ON DELETE CASCADE,
    permission_type VARCHAR(20) NOT NULL, -- read, write, manage
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, field_id)
);
```

#### 烟田基础数据模块
```sql
-- 烟田地块表
CREATE TABLE tobacco_fields (
    id SERIAL PRIMARY KEY,
    field_code VARCHAR(50) UNIQUE NOT NULL,
    field_name VARCHAR(100) NOT NULL,
    contract_area FLOAT NOT NULL, -- 合同面积(亩)
    actual_area FLOAT, -- 实际面积(亩)
    location GEOGRAPHY(POLYGON), -- PostGIS地理数据类型
    boundary JSONB, -- GeoJSON格式边界数据
    farmer_id INTEGER REFERENCES users(id),
    technician_id INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### 数据管理模块
```sql
-- 无人机影像数据表
CREATE TABLE drone_images (
    id SERIAL PRIMARY KEY,
    file_path VARCHAR(255) NOT NULL,
    file_size INTEGER NOT NULL,
    image_type VARCHAR(50) NOT NULL, -- 多光谱、RGB等
    acquisition_date TIMESTAMP NOT NULL,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    coverage_area GEOGRAPHY(POLYGON),
    resolution FLOAT, -- 空间分辨率(cm)
    upload_user_id INTEGER REFERENCES users(id),
    upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB, -- 存储额外元数据
    quality_score FLOAT, -- 影像质量评分
    is_valid BOOLEAN DEFAULT TRUE -- 影像是否有效
);

-- 气象数据表
CREATE TABLE weather_data (
    id SERIAL PRIMARY KEY,
    field_id INTEGER REFERENCES tobacco_fields(id), -- 关联到地块
    location GEOGRAPHY(POINT), -- 数据对应的地理位置
    temperature FLOAT,
    humidity FLOAT,
    rainfall FLOAT,
    wind_speed FLOAT,
    wind_direction VARCHAR(10),
    light_intensity FLOAT,
    record_time TIMESTAMP NOT NULL,
    data_source VARCHAR(50) NOT NULL, -- 改为API来源
    api_request_id VARCHAR(100), -- API请求ID
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 烟叶种植参数表
CREATE TABLE tobacco_parameters (
    id SERIAL PRIMARY KEY,
    field_id INTEGER REFERENCES tobacco_fields(id),
    growing_season INTEGER NOT NULL, -- 种植年度
    leaf_retention_min INTEGER,
    leaf_retention_max INTEGER,
    leaf_weight_min FLOAT, -- 单叶干重最小值(g)
    leaf_weight_max FLOAT, -- 单叶干重最大值(g)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id INTEGER REFERENCES users(id)
);
```

#### 监测任务管理模块
```sql
-- 监测任务类型配置表
CREATE TABLE monitoring_task_types (
    id SERIAL PRIMARY KEY,
    type_code VARCHAR(50) UNIQUE NOT NULL,
    type_name VARCHAR(100) NOT NULL,
    description TEXT,
    required_analysis_types JSONB, -- ['plant_count', 'growth', 'yield']
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 监测任务表
CREATE TABLE monitoring_tasks (
    id SERIAL PRIMARY KEY,
    task_code VARCHAR(50) UNIQUE NOT NULL,
    task_name VARCHAR(100) NOT NULL,
    task_type VARCHAR(50) NOT NULL, -- 对应monitoring_task_types的type_code
    growing_phase VARCHAR(50), -- 移栽期、旺长期、打顶期、成熟采收期
    scheduled_start_date TIMESTAMP NOT NULL,
    scheduled_end_date TIMESTAMP NOT NULL,
    actual_start_date TIMESTAMP,
    actual_end_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'created', -- created, data_collecting, data_validating, basic_analyzing, llm_analyzing, decision_making, executing, feedback_collecting, completed, planning_next
    created_by INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description TEXT,
    priority VARCHAR(10) DEFAULT 'medium', -- high, medium, low
    previous_task_id INTEGER REFERENCES monitoring_tasks(id) -- 前一次监测任务
);

-- 监测任务地块关联表
CREATE TABLE monitoring_task_fields (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id) ON DELETE CASCADE,
    field_id INTEGER REFERENCES tobacco_fields(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'pending', -- pending, completed, skipped
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(monitoring_task_id, field_id)
);
```

#### 基础分析结果模块
```sql
-- 烟株计数结果表
CREATE TABLE plant_count_results (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    plant_count INTEGER NOT NULL,
    plant_density FLOAT NOT NULL, -- 株/亩
    geojson_path VARCHAR(255), -- 存储烟株矢量点文件路径
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    analysis_time FLOAT, -- 分析耗时(秒)
    status VARCHAR(20) DEFAULT 'success', -- success, failed, partial
    error_message TEXT,
    UNIQUE(monitoring_task_id, field_id)
);

-- 长势分析结果表
CREATE TABLE growth_analysis_results (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    tif_path VARCHAR(255), -- 长势分级图文件路径
    excellent_area_ratio FLOAT, -- 优等长势面积占比
    good_area_ratio FLOAT, -- 良好长势面积占比
    medium_area_ratio FLOAT, -- 中等长势面积占比
    poor_area_ratio FLOAT, -- 较差长势面积占比
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    analysis_time FLOAT, -- 分析耗时(秒)
    status VARCHAR(20) DEFAULT 'success', -- success, failed, partial
    error_message TEXT,
    UNIQUE(monitoring_task_id, field_id)
);

-- 估产分析结果表
CREATE TABLE yield_estimation_results (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    estimated_yield FLOAT NOT NULL, -- 估产(kg)
    yield_per_mu FLOAT NOT NULL, -- 亩产(kg/亩)
    confidence_level FLOAT, -- 置信度
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    analysis_time FLOAT, -- 分析耗时(秒)
    status VARCHAR(20) DEFAULT 'success', -- success, failed, partial
    error_message TEXT,
    UNIQUE(monitoring_task_id, field_id)
);
```

#### 大模型分析与决策模块
```sql
-- 异常诊断表
CREATE TABLE anomaly_diagnosis (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    anomaly_type VARCHAR(50) NOT NULL, -- 病害、虫害、生长异常等
    severity VARCHAR(20) NOT NULL, -- high, medium, low
    affected_area_ratio FLOAT, -- 受影响面积比例
    diagnosis_result TEXT NOT NULL, -- 异常诊断结果
    possible_causes TEXT, -- 可能原因
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    llm_model_used VARCHAR(50), -- 使用的大模型
    api_request_id VARCHAR(100), -- API请求ID，便于追踪
    confidence_score FLOAT -- 诊断置信度
);

-- 策略推演表
CREATE TABLE strategy_recommendations (
    id SERIAL PRIMARY KEY,
    monitoring_task_id INTEGER REFERENCES monitoring_tasks(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    recommendation_type VARCHAR(50) NOT NULL, -- 施肥、病虫害防治、灌溉等
    recommendation_content TEXT NOT NULL,
    priority VARCHAR(10) NOT NULL, -- high, medium, low
    execution_deadline TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    llm_model_used VARCHAR(50),
    confidence_score FLOAT,
    previous_execution_feedback TEXT -- 上一次执行情况反馈
);
```

#### 决策执行与反馈模块
```sql
-- 决策执行任务表
CREATE TABLE execution_tasks (
    id SERIAL PRIMARY KEY,
    task_code VARCHAR(50) UNIQUE NOT NULL,
    recommendation_id INTEGER REFERENCES strategy_recommendations(id),
    field_id INTEGER REFERENCES tobacco_fields(id),
    task_type VARCHAR(50) NOT NULL, -- 施肥、病虫害防治、灌溉等
    task_content TEXT NOT NULL,
    assigned_to INTEGER REFERENCES users(id),
    assigned_by INTEGER REFERENCES users(id),
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    due_date TIMESTAMP NOT NULL,
    priority VARCHAR(10) DEFAULT 'medium', -- high, medium, low
    status VARCHAR(20) DEFAULT 'created', -- created, assigned, notified, in_progress, feedback_submitted, feedback_validated, verified, completed
    completion_percentage INTEGER DEFAULT 0,
    notification_sent BOOLEAN DEFAULT FALSE
);

-- 执行反馈表
CREATE TABLE execution_feedback (
    id SERIAL PRIMARY KEY,
    execution_task_id INTEGER REFERENCES execution_tasks(id),
    feedback_content TEXT NOT NULL,
    completion_date TIMESTAMP,
    actual_operation TEXT, -- 实际执行的操作详情
    effectiveness_rating INTEGER, -- 1-5评分
    difficulties_encountered TEXT,
    submitted_by INTEGER REFERENCES users(id),
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    media_urls JSONB, -- 照片、视频等URL数组
    reviewer_id INTEGER REFERENCES users(id),
    review_status VARCHAR(20) DEFAULT 'pending', -- pending, approved, rejected
    review_comments TEXT
);
```

## 核心业务流程规则

### 监测任务生命周期

#### 1. 监测任务创建
- **触发方式**
  - 系统基于上次监测结果和反馈自动规划（管理员确认）
  - 系统根据烟叶生长周期自动建议（移栽期、旺长期、打顶期、成熟采收期）
  - 管理员手动创建
- **创建内容**
  - 任务基本信息（编号、名称、类型等）
  - 监测地块选择（可批量选择多个地块）
  - 监测项目配置（烟株计数/长势分析/估产分析）
  - 时间安排（计划开始和结束时间）

#### 2. 数据采集阶段
- **无人机影像采集与上传**
  - 影像质量检查（清晰度、覆盖范围）
  - 自动匹配地块信息（基于烟田地块边界矢量数据）
- **气象数据自动获取**
  - 实时气象数据（调用第三方API、温湿度、降水量、光照）
  - 天气预报数据（调用第三方API）
- **种植参数确认**
  - 合同面积
  - 留叶数范围
  - 单叶干重范围

#### 3. 基础分析阶段
**分析任务编排示例**:
```python
class AnalysisPipeline:
    def __init__(self, task_id):
        self.task_id = task_id
        self.field_data = self.get_field_data()
        
    async def execute(self):
        # 烟株计数分析
        plant_count_result = await self.run_plant_count(
            images=self.field_data.drone_images,
            field_boundaries=self.field_data.field_boundaries,
            task_id=self.task_id
        )
        
        # 长势分析
        growth_result = await self.run_growth_analysis(
            images=self.field_data.drone_images,
            field_boundaries=self.field_data.field_boundaries,
            task_id=self.task_id
        )
        
        # 估产分析
        if plant_count_result and growth_result:
            yield_result = await self.run_yield_estimation(
                plant_count=plant_count_result,
                growth_analysis=growth_result,
                contract_area=self.field_data.contract_area,
                leaf_retention=self.field_data.leaf_retention,
                single_leaf_weight=self.field_data.single_leaf_weight,
                field_boundaries=self.field_data.field_boundaries,
                task_id=self.task_id
            )
```

#### 4. 大模型综合智慧分析与决策阶段
**分析流程示例**:
```python
class LLMAnalysisPipeline:
    def __init__(self, task_id, field_id):
        self.task_id = task_id
        self.field_id = field_id
        self.analysis_results = self.get_analysis_results()
        self.historical_data = self.get_historical_data()
        self.knowledge_base = self.get_knowledge_base()
        
    async def execute(self):
        # 参数优化（优化基础分析中的参数）
        optimized_params = await self.run_parameter_optimization(
            historical_data=self.historical_data,
            current_data=self.analysis_results,
            knowledge_base=self.knowledge_base
        )
        
        # 异常诊断（识别生长异常并分析原因）
        diagnosis = await self.run_anomaly_diagnosis(
            analysis_results=self.analysis_results,
            historical_data=self.historical_data,
            optimized_params=optimized_params,
            knowledge_base=self.knowledge_base,
            weather_data=self.get_weather_data()
        )
        
        # 策略推演（制定种植决策建议）
        if diagnosis:
            strategy = await self.run_strategy_planning(
                diagnosis=diagnosis,
                historical_tasks=self.historical_data.previous_tasks,
                weather_forecast=self.get_weather_forecast(),
                knowledge_base=self.knowledge_base,
                growing_phase=self.get_growing_phase()
            )
        
        # 报告生成（生成综合分析报告）
        if strategy:
            report = await self.generate_report(
                diagnosis=diagnosis,
                strategy=strategy,
                analysis_results=self.analysis_results,
                field_info=self.get_field_info()
            )
            
        # 监测任务制定（规划下次监测）
        next_monitoring = await self.plan_next_monitoring(
            current_results=self.analysis_results,
            strategy=strategy,
            feedback=self.get_previous_feedback(),
            growing_phase=self.get_growing_phase(),
            weather_forecast=self.get_weather_forecast()
        )
```

#### 5. 决策执行任务分配阶段
**任务分发流程示例**:
```python
class TaskDispatcher:
    def dispatch_tasks(self, strategy_recommendations):
        execution_tasks = []
        
        for strategy in strategy_recommendations:
            # 根据地块信息确定关联烟农和烟技人员
            field_info = self.get_field_info(strategy.field_id)
            
            # 创建执行任务
            task = self.create_execution_task(
                strategy=strategy,
                field_info=field_info,
                priority=self.calculate_priority(strategy)
            )
            
            # 分配任务给烟农和烟技人员
            farmers = field_info.farmers
            technicians = field_info.technicians
            
            self.assign_task(task, farmers, technicians)
            
            # 发送通知（Web端）
            self.send_notifications(task)
            
            # 添加到农事日历
            self.add_to_calendar(task, is_decision_task=True)
            
            execution_tasks.append(task)
            
        return execution_tasks
```

#### 6. 执行反馈阶段
- **反馈收集**:
  - 执行时间记录
  - 执行照片上传
  - 执行效果评估（完成度、质量）
  - 困难和建议记录
- **反馈分析**:
  - 执行效果评估（与预期对比）
  - 问题归类统计
  - 经验总结提取（用于知识库更新）

#### 7. 下次监测规划
- **规划依据**:
  - 本次执行效果与反馈
  - 作物生长周期阶段
  - 天气预报信息
  - 历史监测经验
- **规划内容**:
  - 下次监测时间
  - 监测项目选择
  - 重点关注区域和内容

### 用户交互流程

#### 管理员视角
```mermaid
graph TD
    A[登录系统] --> B[主控仪表板]
    B --> C1[数据管理]
    B --> C2[监测任务管理]
    B --> C3[决策任务监控]
    B --> C4[用户权限管理]
    B --> C5[知识库管理]
    C1 --> D1[数据上传/查看]
    C1 --> D1a[传感器数据管理]
    C1 --> D1b[业务数据管理]
    C2 --> D2[创建/编辑监测任务]
    D2 --> E1[启动分析流程]
    E1 --> F1[查看分析结果]
    F1 --> G1[审核智能决策建议]
    G1 --> H1[确认决策执行任务分配]
    C3 --> D3[任务执行状态查看]
    C3 --> D3a[执行反馈审核]
    C4 --> D4[用户添加/编辑]
    C4 --> D4a[权限分配]
    C5 --> D5[知识库创建/编辑]
    D5 --> E5[文档上传与分类]
    E5 --> F5[知识库构建与更新]
```

#### 烟技人员视角
```mermaid
graph TD
    A[登录系统] --> B[个人工作台]
    B --> C1[查看监测任务进度]
    B --> C2[查看决策执行任务]
    B --> C3[农事管理日历]
    B --> C4[智能体咨询]
    B --> C5[知识库查询]
    C1 --> D1[监测任务地块详情]
    C1 --> D1a[分析结果查看]
    C2 --> D2[执行指导任务]
    D2 --> E1[上传执行反馈]
    C3 --> D3[查看所有农事操作]
    C3 --> D3a[添加常规农事记录]
    C4 --> D4[专业问题咨询]
    C5 --> D5[文档搜索与查看]
```

#### 烟农视角
```mermaid
graph TD
    A[登录系统] --> B[我的烟田]
    B --> C1[查看我的地块]
    B --> C2[查看我的任务]
    B --> C3[我的农事日历]
    B --> C4[智能体咨询]
    C1 --> D1[地块详情查看]
    C1 --> D1a[地块监测历史]
    C2 --> D2[执行农事任务]
    D2 --> E1[提交执行情况]
    C3 --> D3[查看历史操作]
    C3 --> D3a[添加日常农事记录]
    C4 --> D4[种植问题咨询]
```

### 系统响应机制

#### 实时通知
```python
class NotificationService:
    def __init__(self):
        self.notification_types = {
            'task_created': '新监测任务通知',
            'analysis_completed': '分析完成通知',
            'decision_task_assigned': '决策执行任务分配通知',
            'task_reminder': '任务执行提醒',
            'execution_feedback': '执行反馈通知',
            'weather_alert': '天气预警通知',
            'growth_anomaly': '生长异常警报',
            'next_monitoring_suggested': '下次监测建议通知',
            'knowledge_base_updated': '知识库更新通知',
            'parameter_optimization': '参数优化通知',
            'growing_phase_change': '生长周期变更通知'
        }
        
    async def send_notification(self, user_id, type, content, priority='normal'):
        # 根据用户角色和通知类型选择通知方式
        user_preferences = self.get_user_preferences(user_id)
        notification_methods = self.determine_methods(type, priority, user_preferences)
        
        # 智能体对话窗口通知
        if self.should_use_chat_window(type, priority):
            await self.send_chat_notification(user_id, content)
            
        # Web端通知发送
        for method in notification_methods:
            await self.dispatch_notification(user_id, type, content, method)
```

#### 状态追踪
```python
class StatusTracker:
    def __init__(self):
        self.status_flow = {
            'monitoring_task': [
                'created',               # 已创建
                'data_collecting',       # 数据采集中
                'data_validating',       # 数据验证中
                'basic_analyzing',       # 基础分析中
                'llm_analyzing',         # 大模型分析中
                'decision_making',       # 决策制定中
                'executing',             # 执行中
                'feedback_collecting',   # 反馈收集中
                'completed',             # 已完成
                'planning_next'          # 规划下次监测
            ],
            'execution_task': [
                'created',               # 已创建
                'assigned',              # 已分配
                'notified',              # 已通知
                'in_progress',           # 进行中
                'feedback_submitted',    # 已提交反馈
                'feedback_validated',    # 反馈已验证
                'verified',              # 已验证
                'completed'              # 已完成
            ]
        }
```

## API设计规则

### 统一响应结构
```json
{
  "success": true|false,
  "code": 200|400|401|403|404|500,
  "message": "操作成功"|"错误信息",
  "data": {}, // 返回的主体数据
  "meta": {   // 元数据，如分页信息
    "page": 1,
    "page_size": 10,
    "total": 100
  }
}
```

### API模块划分与路径

#### 用户与权限管理API
```
# 用户认证
POST /api/auth/login/ - 用户登录
POST /api/auth/logout/ - 用户登出
POST /api/auth/password/change/ - 修改密码
POST /api/auth/password/reset/ - 重置密码

# 用户管理
GET /api/users/ - 获取用户列表
POST /api/users/ - 创建新用户
GET /api/users/{id}/ - 获取用户详情
PUT /api/users/{id}/ - 更新用户信息
DELETE /api/users/{id}/ - 删除用户

# 权限管理
GET /api/permissions/fields/ - 获取用户地块权限列表
POST /api/permissions/fields/ - 创建地块权限
DELETE /api/permissions/fields/{id}/ - 删除地块权限
```

#### 烟田基础数据API
```
# 烟田地块管理
GET /api/fields/ - 获取地块列表
POST /api/fields/ - 创建新地块
GET /api/fields/{id}/ - 获取地块详情
PUT /api/fields/{id}/ - 更新地块信息
DELETE /api/fields/{id}/ - 删除地块
GET /api/fields/geojson/ - 获取所有地块边界GeoJSON
GET /api/fields/by-user/{user_id}/ - 获取用户相关地块


#### 数据管理API
```
# 无人机影像数据
GET /api/drone-images/ - 获取影像列表
POST /api/drone-images/ - 上传新影像
GET /api/drone-images/{id}/ - 获取影像详情
DELETE /api/drone-images/{id}/ - 删除影像
GET /api/drone-images/task/{task_id}/ - 获取任务相关影像
GET /api/drone-images/check-quality/{id}/ - 检查影像质量

# 气象数据
GET /api/weather-data/ - 获取气象数据列表
POST /api/weather-data/ - 添加气象数据(手动)
GET /api/weather-data/field/{field_id}/ - 获取地块相关气象数据
GET /api/weather-data/forecast/ - 获取气象预报数据
GET /api/weather-data/historical/ - 获取历史气象数据

# 烟叶种植参数
GET /api/tobacco-parameters/ - 获取种植参数列表
POST /api/tobacco-parameters/ - 创建种植参数
GET /api/tobacco-parameters/field/{field_id}/ - 获取地块种植参数
PUT /api/tobacco-parameters/{id}/ - 更新种植参数

# 文档管理
GET /api/documents/ - 获取文档列表
POST /api/documents/ - 上传新文档
GET /api/documents/{id}/ - 获取文档详情
PUT /api/documents/{id}/ - 更新文档信息
DELETE /api/documents/{id}/ - 删除文档
GET /api/documents/search/ - 搜索文档
GET /api/documents/categories/ - 获取文档分类

# 知识库管理
GET /api/knowledge-bases/ - 获取知识库列表
POST /api/knowledge-bases/ - 创建知识库
GET /api/knowledge-bases/{id}/ - 获取知识库详情
PUT /api/knowledge-bases/{id}/ - 更新知识库
DELETE /api/knowledge-bases/{id}/ - 删除知识库
POST /api/knowledge-bases/{id}/documents/ - 添加文档到知识库
DELETE /api/knowledge-bases/{id}/documents/{doc_id}/ - 从知识库移除文档
POST /api/knowledge-bases/{id}/rebuild/ - 重新构建知识库
```

#### 监测任务管理API
```
# 监测任务类型配置
GET /api/config/monitoring-task-types/ - 获取监测任务类型列表
POST /api/config/monitoring-task-types/ - 创建监测任务类型
PUT /api/config/monitoring-task-types/{id}/ - 更新监测任务类型
DELETE /api/config/monitoring-task-types/{id}/ - 删除监测任务类型

# 监测任务
GET /api/monitoring-tasks/ - 获取任务列表
POST /api/monitoring-tasks/ - 创建新任务
GET /api/monitoring-tasks/{id}/ - 获取任务详情
PUT /api/monitoring-tasks/{id}/ - 更新任务
DELETE /api/monitoring-tasks/{id}/ - 删除任务
GET /api/monitoring-tasks/calendar/ - 获取日历格式任务
GET /api/monitoring-tasks/user/{user_id}/ - 获取用户相关任务
PUT /api/monitoring-tasks/{id}/status/ - 更新任务状态

# 任务-地块关联
GET /api/monitoring-tasks/{id}/fields/ - 获取任务关联地块
POST /api/monitoring-tasks/{id}/fields/ - 添加地块到任务
DELETE /api/monitoring-tasks/{id}/fields/{field_id}/ - 从任务移除地块
PUT /api/monitoring-tasks/{id}/fields/{field_id}/status/ - 更新地块任务状态
```

#### 基础分析API
```
# 烟株计数分析
POST /api/analysis/plant-count/ - 执行烟株计数分析
GET /api/analysis/plant-count/results/ - 获取烟株计数结果列表
GET /api/analysis/plant-count/results/{id}/ - 获取烟株计数结果详情
GET /api/analysis/plant-count/results/task/{task_id}/ - 获取任务烟株计数结果
GET /api/analysis/plant-count/results/field/{field_id}/ - 获取地块烟株计数结果

# 长势分析
POST /api/analysis/growth/ - 执行长势分析
GET /api/analysis/growth/results/ - 获取长势分析结果列表
GET /api/analysis/growth/results/{id}/ - 获取长势分析结果详情
GET /api/analysis/growth/results/task/{task_id}/ - 获取任务长势分析结果
GET /api/analysis/growth/results/field/{field_id}/ - 获取地块长势分析结果

# 估产分析
POST /api/analysis/yield-estimation/ - 执行估产分析
GET /api/analysis/yield-estimation/results/ - 获取估产分析结果列表
GET /api/analysis/yield-estimation/results/{id}/ - 获取估产分析结果详情
GET /api/analysis/yield-estimation/results/task/{task_id}/ - 获取任务估产分析结果
GET /api/analysis/yield-estimation/results/field/{field_id}/ - 获取地块估产分析结果

# 分析流水线
POST /api/analysis/pipeline/start/ - 开始分析流水线
GET /api/analysis/pipeline/status/{pipeline_id}/ - 获取流水线状态
```

#### 大模型分析与决策API
```
# 异常诊断
POST /api/llm/anomaly-diagnosis/ - 执行异常诊断
GET /api/llm/anomaly-diagnosis/ - 获取异常诊断列表
GET /api/llm/anomaly-diagnosis/{id}/ - 获取异常诊断详情
GET /api/llm/anomaly-diagnosis/task/{task_id}/ - 获取任务异常诊断
GET /api/llm/anomaly-diagnosis/field/{field_id}/ - 获取地块异常诊断

# 策略推演
POST /api/llm/strategy-recommendations/ - 执行策略推演
GET /api/llm/strategy-recommendations/ - 获取策略推演列表
GET /api/llm/strategy-recommendations/{id}/ - 获取策略推演详情
GET /api/llm/strategy-recommendations/task/{task_id}/ - 获取任务策略推演
GET /api/llm/strategy-recommendations/field/{field_id}/ - 获取地块策略推演

# 分析报告
POST /api/llm/reports/generate/ - 生成分析报告
GET /api/llm/reports/ - 获取报告列表
GET /api/llm/reports/{id}/ - 获取报告详情
GET /api/llm/reports/task/{task_id}/ - 获取任务报告
GET /api/llm/reports/field/{field_id}/ - 获取地块报告

# 下次监测规划
POST /api/llm/next-monitoring/plan/ - 生成下次监测规划
GET /api/llm/next-monitoring/plan/task/{task_id}/ - 获取当前任务的下次监测规划
PUT /api/llm/next-monitoring/plan/{id}/status/ - 更新监测规划状态

# 智能体对话
POST /api/llm/chat/ - 发送对话消息
GET /api/llm/chat/history/ - 获取对话历史
POST /api/llm/chat/clear-history/ - 清除对话历史
```

#### 决策执行与反馈API
```
# 执行任务
GET /api/execution-tasks/ - 获取执行任务列表
POST /api/execution-tasks/ - 创建执行任务
GET /api/execution-tasks/{id}/ - 获取执行任务详情
PUT /api/execution-tasks/{id}/ - 更新执行任务
DELETE /api/execution-tasks/{id}/ - 删除执行任务
PUT /api/execution-tasks/{id}/status/ - 更新任务状态
GET /api/execution-tasks/user/{user_id}/ - 获取用户任务列表
GET /api/execution-tasks/field/{field_id}/ - 获取地块任务列表

# 执行反馈
POST /api/execution-tasks/{task_id}/feedback/ - 提交执行反馈
GET /api/execution-tasks/{task_id}/feedback/ - 获取执行反馈
PUT /api/execution-tasks/{task_id}/feedback/{id}/ - 更新执行反馈
PUT /api/execution-tasks/{task_id}/feedback/{id}/review/ - 审核执行反馈

# 任务通知
POST /api/notifications/send/ - 发送任务通知
GET /api/notifications/ - 获取通知列表
PUT /api/notifications/{id}/read/ - 标记通知为已读
GET /api/notifications/unread-count/ - 获取未读通知数量
DELETE /api/notifications/{id}/ - 删除通知
```

### API请求参数规范
- **分页参数**：`page`（页码，从1开始）和`page_size`（每页记录数，默认10）
- **排序参数**：`order_by`（字段名，前缀-表示降序，如`-created_at`）
- **过滤参数**：
  - 等值匹配：`field=value`
  - 范围匹配：`field_gt=value`（大于）, `field_lt=value`（小于）
  - 包含匹配：`field_in=value1,value2`（在列表中）
  - 模糊匹配：`field_contains=value`（包含字符串）
- **时间范围参数**：`start_date`和`end_date`（ISO 8601格式）
- **地理空间参数**：
  - 点查询：`lat`（纬度）和`lng`（经度）
  - 范围查询：`bbox`（边界框，格式为`minLng,minLat,maxLng,maxLat`）

### 异步任务处理框架
使用Celery处理长时间运行的任务：
```python
# 使用Celery处理长时间运行的任务
@shared_task
def run_analysis_pipeline(task_id):
    """运行完整分析流水线的异步任务"""
    try:
        task = MonitoringTask.objects.get(id=task_id)
        task.status = 'basic_analyzing'
        task.save()
        
        # 1. 执行烟株计数分析
        plant_count_results = run_plant_count_analysis(task)
        
        # 2. 执行长势分析
        growth_results = run_growth_analysis(task)
        
        # 3. 执行估产分析
        yield_results = run_yield_estimation(task, plant_count_results, growth_results)
        
        # 4. 启动大模型分析
        task.status = 'llm_analyzing'
        task.save()
        run_llm_analysis.delay(task_id)
        
        return {
            'task_id': task_id,
            'status': 'success',
            'results': {
                'plant_count': plant_count_results,
                'growth': growth_results,
                'yield': yield_results
            }
        }
    except Exception as e:
        return {
            'task_id': task_id,
            'status': 'failed',
            'error': str(e)
        }
```

## 前端开发规则

### 页面结构

#### 通用布局
- 顶部导航栏
- 侧边菜单
- 页面主体内容区
- 底部版权信息
- 全局通知提示
- 智能体对话悬浮窗

#### 管理员界面
- 仪表盘
  - 监测任务概览（待处理、进行中、已完成）
  - 执行任务概览（待执行、进行中、已完成）
  - 地块状态统计
  - 最近监测任务列表
  - 最近执行反馈
  - 天气预报卡片

- 数据管理
  - 无人机影像管理
  - 气象数据管理
  - 种植参数管理
  - 文档管理
  - 知识库管理

- 监测任务管理
  - 任务列表视图
  - 任务日历视图
  - 任务创建/编辑表单
  - 任务详情页
  - 任务进度追踪

- 基础分析
  - 分析结果列表
  - 分析详情视图
  - 分析参数配置

- 智能决策
  - 异常诊断结果
  - 策略推演建议
  - 分析报告查看
  - 下次监测规划

- 决策执行
  - 任务分配界面
  - 执行任务列表
  - 执行反馈审核
  - 执行效果评估

- 系统配置
  - 用户管理
  - 权限配置
  - 系统参数设置
  - 分析参数配置

#### 烟技人员界面
- 个人工作台
  - 待处理任务
  - 未读通知
  - 管辖地块概览
  - 近期执行任务日历

- 地块管理
  - 地块列表
  - 地块详情页
  - 地块监测历史

- 监测任务
  - 相关监测任务列表
  - 监测结果查看

- 决策执行
  - 执行任务列表
  - 执行反馈提交
  - 农事记录查看

- 农事管理
  - 农事日历
  - 农事记录表单

- 知识库
  - 文档查询
  - 智能体咨询

#### 烟农界面
- 我的烟田
  - 地块列表
  - 地块详情
  - 最近监测结果

- 我的任务
  - 待执行任务
  - 已完成任务列表
  - 任务反馈提交

- 农事日历
  - 日历视图
  - 农事记录添加

- 智能咨询
  - 智能体对话窗口

### 地图界面设计

#### 地图组件功能
- 地块边界展示
- 实时气象数据覆盖图层
- 气象预报图层
- 烟株点位展示
- 长势分级图叠加
- 多时相比对功能
- 地块筛选功能
- 基础地图操作（缩放、平移）
- 图层控制

#### 地图交互
- 点击地块显示详情弹窗
- 地块高亮选择
- 图层透明度调整
- 时间轴控制
- 测量工具
- 导出图片
- 绘制标记

### 分析结果可视化设计

#### 烟株计数可视化
- 点位分布图
- 密度热力图
- 数量统计图表
- 与标准值对比图

#### 长势分析可视化
- 长势等级彩色栅格图
- 长势分级面积占比饼图
- 长势分布柱状图
- 与历史数据对比折线图

#### 估产分析可视化
- 产量预测柱状图
- 单位面积产量地图
- 产量趋势折线图
- 与合同产量对比图

#### 异常诊断可视化
- 异常区域标记地图
- 异常类型分布图
- 异常严重程度热力图
- 可能原因关联图

### 智能体交互界面

#### 对话窗口
- 消息列表展示
- 消息输入框
- 快速问题模板
- 历史会话管理
- 上下文保持

#### 地块关联功能
- 选择当前讨论地块
- 展示地块相关数据
- 引用分析结果
- 查询历史记录

#### 决策支持功能
- 显示相关决策建议
- 提供参考文档链接
- 生成操作指导
- 导出对话摘要

### 组件开发规范
- 组件必须遵循单一职责原则
- 所有组件应支持主题化
- 组件应提供适当的默认值和错误处理
- 组件之间的通信使用props向下、事件向上的方式
- 复杂组件应提供详细的文档和示例
- 组件应包含适当的单元测试

### 表单处理规则
- 使用Element Plus的Form组件
- 所有表单必须包含客户端验证
- 表单状态应该使用v-model进行双向绑定
- 表单提交应包含防重复提交机制
- 表单错误应在提交前和服务器返回后显示
- 表单字段应支持必要的输入限制和格式化

### 状态管理规则
- 全局状态使用Pinia store管理
- 组件内部状态使用ref/reactive
- 状态操作应封装在store的actions中
- 复杂状态变更应使用mutations
- 状态更新应考虑性能和异步问题
- 应根据状态更新频率决定是否需要持久化

## 大模型集成规则

### 提示词模板设计
- **结构化设计**：
  - 固定指令部分
  - 动态上下文部分
  - 示例和格式要求部分
- **参数化设计**：使用占位符替换动态内容
- **按分析类型分类**：
  - 异常诊断模板
  - 策略推演模板
  - 报告生成模板
  - 监测规划模板

### 知识库构建规则
- **文档分类**：
  - 技术指南：标准种植流程、技术规范
  - 病虫害图谱：常见病虫害识别与防治
  - 政策文件：行业政策、补贴标准
  - 历史案例：成功经验、失败教训
- **文档预处理**：
  - 提取关键信息
  - 生成文档摘要
  - 转换为向量存储格式
- **更新机制**：
  - 定期更新（每月/每季度）
  - 触发式更新（新文档添加）
  - 反馈驱动更新（用户反馈）

### 大模型调用规则
- **请求超时设置**：最长30秒
- **失败重试机制**：最多重试3次，指数退避策略
- **结果缓存**：相同输入24小时内复用结果
- **请求限流**：每分钟每用户最多10次调用
- **输出格式标准化**：JSON结构
- **降级策略**：模型不可用时提供基础分析结果

### 大模型选型与配置
- **主要模型**：支持GPT-4、Claude Opus、文心4.0等顶级大模型
- **备用模型**：对于实时性要求高的场景，使用低延迟模型
- **模型参数**：
  - 温度(temperature)：0.2-0.4，保持稳定性
  - 最大输出(max_tokens)：根据任务设置
  - 重复惩罚(repetition_penalty)：1.2，避免重复内容

### 大模型集成架构
- **提供商适配层**：统一不同大模型API的接口
- **上下文管理层**：维护多轮对话状态
- **知识库检索层**：提供相关文档检索功能
- **结果处理层**：解析和处理模型输出
- **监控与日志层**：记录调用情况和错误

## 异步任务处理规则

### Celery任务分类
- **分析任务队列**：优先级高，资源占用大
  - 图像处理和分析任务
  - 大模型分析任务
  - 数据导入/导出任务
- **通知任务队列**：优先级中，实时性要求高
  - 用户通知发送
  - 状态更新推送
  - 报告生成
- **数据同步任务队列**：优先级低，可延迟执行
  - 数据备份
  - 统计报表生成
  - 系统维护任务

### 任务超时设置
- 基础分析任务：最长30分钟
- 大模型分析任务：最长10分钟
- 通知类任务：最长2分钟
- 数据同步任务：最长60分钟

### 任务重试策略
- 自动重试最多3次
- 重试间隔递增：30秒、2分钟、5分钟
- 特定错误类型不重试（如验证错误）
- 达到最大重试次数后发送告警

### 结果存储
- 存储在Redis中（有效期24小时）
- 重要结果同步写入数据库
- 大型结果（如影像分析）保存为文件
- 结果状态实时更新到任务表

### 任务调度器
- 定时任务使用Celery Beat
- 支持crontab和interval两种调度方式
- 关键定时任务：
  - 气象数据自动获取（每小时）
  - 任务状态检查（每5分钟）
  - 执行任务提醒（每天）
  - 系统状态报告（每天）

## 安全规则

### 身份认证
- 使用JWT，有效期2小时
- 支持刷新token机制（刷新token有效期7天）
- 密码存储使用PBKDF2算法
- 登录失败限制（5次失败后锁定账户10分钟）
- 敏感操作二次验证

### 权限控制
- 基于角色（RBAC）：admin, technician, farmer
- 地块级别权限控制
- 数据操作权限分离（读、写、管理）
- 功能模块访问权限控制
- API接口权限检查

### 数据安全
- API传输使用HTTPS
- 敏感数据字段加密存储
- 文件上传安全检查（类型、大小、内容）
- 临时文件定期清理
- 数据库备份加密

### 防护措施
- 防SQL注入
- 防XSS攻击
- 防CSRF攻击
- IP请求限制
- 输入验证和净化

## 错误处理规则

### 错误分级
- **critical**：需要立即人工干预的严重错误
  - 数据库连接失败
  - 关键服务不可用
  - 数据损坏或丢失
- **warning**：可能影响系统运行但不会导致系统崩溃的错误
  - 第三方API调用失败
  - 分析任务部分失败
  - 非关键数据处理错误
- **info**：提示性信息，不影响系统正常运行
  - 用户登录/登出
  - 配置更改
  - 常规操作记录

### 错误日志记录
- 包含时间、错误类型、错误信息、上下文信息
- 严重错误发送通知给管理员
- 按日期和错误级别分类存储
- 定期归档和清理

### 用户友好错误提示
- 屏蔽技术细节，只展示必要信息
- 提供可操作的解决建议
- 使用错误码便于技术支持定位问题
- 提供反馈渠道

### 全局错误处理机制
- 前端：全局错误拦截
- 后端：统一异常处理中间件
- API错误响应标准化
- 未捕获异常记录与通知

## 测试规范

### 单元测试要求
- 后端模型测试覆盖率≥90%
- API测试覆盖率≥80%
- 重要业务逻辑测试覆盖率100%
- 使用pytest作为测试框架

### 集成测试
- 监测任务生命周期测试
- 大模型分析流程测试
- 用户权限与安全测试
- 系统接口协同测试

### 性能测试
- API响应时间基准：普通请求<200ms，复杂请求<1s
- 并发用户支持数量：管理员10人，技术人员50人，农户500人
- 长任务处理能力：同时处理10个分析任务
- 数据库查询性能：常用查询<100ms

### 前端测试
- 组件单元测试：使用Vue Test Utils
- E2E测试：使用Cypress测试关键用户流程
- 兼容性测试：Chrome、Firefox、Safari、Edge最新版
- 响应式布局测试：桌面、平板、移动设备

### 测试流程
- 开发环境：开发人员本地单元测试
- 持续集成：自动化测试集成到CI流程
- 测试环境：完整集成测试和性能测试
- 生产前：最终验收测试

## 部署规范

### 环境区分
- **开发环境(dev)**：
  - 用于日常开发
  - 使用测试数据库
  - 允许调试工具
  - 详细错误信息
- **测试环境(test)**：
  - 集成测试环境
  - 模拟生产数据
  - 完整功能测试
  - 性能测试
- **生产环境(prod)**：
  - 正式运行环境
  - 真实数据
  - 优化性能
  - 最小化日志

### 容器化规则
- 使用Docker Compose开发环境
- 使用Kubernetes生产环境
- 服务拆分：后端、前端、数据库、缓存、工作队列
- 镜像版本管理：使用语义化版本标记镜像

### CI/CD流程
- 代码提交触发自动测试
- 测试通过自动部署到测试环境
- 手动确认部署到生产环境
- 支持快速回滚机制

### 部署清单
- 环境变量配置
- 数据库迁移脚本
- 静态资源部署
- 证书配置
- 监控工具设置
- 备份恢复计划

## 监控与日志规范

### 系统监控
- **服务器指标**：
  - CPU使用率
  - 内存使用率
  - 磁盘使用率和I/O
  - 网络流量
- **应用指标**：
  - 请求量
  - 响应时间
  - 错误率
  - 并发用户数
- **数据库指标**：
  - 连接数
  - 查询性能
  - 锁等待
  - 表空间使用率

### 业务监控
- 任务执行状态
- 大模型调用次数与耗时
- 用户活跃度
- 关键业务流程完成率

### 日志收集
- 统一日志格式：JSON结构
- 分级：DEBUG, INFO, WARNING, ERROR, CRITICAL
- 包含请求ID，便于追踪完整调用链
- 定期归档和清理

### 告警规则
- 服务不可用立即告警
- 性能下降超过阈值告警
- 错误率超过阈值告警
- 磁盘空间低于20%告警
- 支持邮件、短信、钉钉等多种通知渠道

## 性能优化规则

### 数据库优化
- 使用适当索引
- 大表分区
- 查询优化（EXPLAIN分析）
- 批量操作替代循环单条操作
- 定期维护（VACUUM、REINDEX）

### 缓存策略
- API数据缓存（TTL: 5分钟）
- 热点地块数据缓存
- 分析结果缓存
- 用户权限缓存
- 静态数据缓存

### 前端优化
- 静态资源CDN
- 组件懒加载
- 大地图数据分块加载
- 图片懒加载和压缩
- 代码分割和路由懒加载

### 后端优化
- 数据库连接池
- 异步任务处理
- API结果分页
- 避免N+1查询问题
- 使用适当的数据结构和算法

## 文档规范

### 代码注释要求
- 类和方法必须有文档字符串
- 复杂逻辑必须有行内注释
- 使用统一的注释格式（如docstring）
- 关键算法必须有原理说明
- 注释应随代码变化保持更新

### 项目文档
- README.md：项目概述与快速开始
- API文档：自动生成并保持更新
- 部署文档：环境准备与部署步骤
- 用户手册：按角色分类的操作指南
- 开发指南：开发环境搭建、规范说明

### 文档更新流程
- 代码变更必须包含文档更新
- 文档变更需要代码审核人员确认
- 重要功能变更需更新用户手册
- API文档随API变更自动生成
- 每个版本发布必须更新CHANGELOG

## 分支管理规则

### 分支命名
- 功能分支：feature/功能名称
- 修复分支：fix/问题简述
- 发布分支：release/版本号
- 热修复分支：hotfix/问题简述

### 版本管理
- 遵循语义化版本（Semantic Versioning）
- 大版本.小版本.补丁版本
- 重大更新增加大版本号
- 新功能增加小版本号
- 修复问题增加补丁版本号

### 合并流程
- 提交Pull Request
- 代码审查通过
- 自动测试通过
- 管理员批准合并
- 合并完成后删除特性分支

### 发布流程
- 从develop分支创建release分支
- 在release分支上进行版本测试
- 测试通过后合并到master和develop
- 在master上打tag
- 从master部署到生产环境






